# Generated by Django 5.0.7 on 2024-07-30 08:21

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Body',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.CharField(max_length=42, verbose_name='Тип кузова')),
            ],
        ),
        migrations.CreateModel(
            name='BodyColor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body_color', models.CharField(max_length=32, verbose_name='Цвет кузова')),
            ],
        ),
        migrations.CreateModel(
            name='Checkpoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checkpoint', models.CharField(max_length=120, verbose_name='Коробка передач')),
            ],
        ),
        migrations.CreateModel(
            name='DriveUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('drive_unit', models.CharField(max_length=42, verbose_name='Привод')),
            ],
        ),
        migrations.CreateModel(
            name='Marka',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marka', models.CharField(max_length=40, verbose_name='Марка')),
            ],
        ),
        migrations.CreateModel(
            name='StreengWhell',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('steering_wheel', models.CharField(max_length=10, verbose_name='Руль')),
            ],
        ),
        migrations.CreateModel(
            name='Year',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_of_manufacture', models.PositiveIntegerField(default=2020, verbose_name='Год выпуска')),
            ],
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('car_model', models.CharField(max_length=75, verbose_name='Модель')),
                ('price', models.PositiveIntegerField(default=0, verbose_name='Цена')),
                ('mileage', models.PositiveIntegerField(default=0, verbose_name='Пробег')),
                ('engine', models.CharField(max_length=50, verbose_name='Двигатель')),
                ('power', models.CharField(max_length=142, verbose_name='Мощность')),
                ('owners', models.PositiveSmallIntegerField(blank=True, default=1, null=True, verbose_name='Количество владельцев')),
                ('name', models.CharField(max_length=42, verbose_name='Имя')),
                ('phone_number', models.CharField(max_length=15, verbose_name='Номер продавца')),
                ('body', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='MainApp.body', verbose_name='Кузов')),
                ('body_color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='MainApp.bodycolor', verbose_name='Цвет кузова')),
                ('checkpoint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='MainApp.checkpoint', verbose_name='Коробка передач')),
                ('drive_unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='MainApp.driveunit', verbose_name='Привод')),
                ('marka', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='MainApp.marka', verbose_name='Марка')),
                ('steering_wheel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='MainApp.streengwhell', verbose_name='Руль')),
                ('year_of_manufacture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='MainApp.year', verbose_name='Год')),
            ],
        ),
        migrations.CreateModel(
            name='CarImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='car_images/', verbose_name='Фото машины')),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='MainApp.car', verbose_name='id машины')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('category_icon', models.ImageField(upload_to='category_icon/')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='MainApp.category')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
